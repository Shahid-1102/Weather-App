package com.shahid.backend.service;

import com.shahid.backend.model.WeatherData;
import com.shahid.backend.repo.WeatherRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class WeatherService {

    @Value("${openweather.api.key}")
    private String apiKey;

    private static final long CACHE_VALIDITY_DURATION = 30L;

    @Autowired
    public WeatherRepo weatherRepo;

    public WeatherData getWeather(String city) {
        Optional<WeatherData> cachedWeather = weatherRepo.findByCityName(city);

        if (cachedWeather.isPresent()) {
            WeatherData weather = cachedWeather.get();

            // Check if the cached data is still valid (within 30 minutes)
            if (weather.getTimestamp().isAfter(LocalDateTime.now().minusMinutes(CACHE_VALIDITY_DURATION))) {
                return weather;  // Return the cached data if valid
            }
        }

        // If no valid cache, fetch new data from OpenWeather API
        WeatherData weather = fetchWeatherFromApi(city);

        if (weather != null) {
            weather.setTimestamp(LocalDateTime.now());  // Set the current timestamp
            weatherRepo.save(weather);  // Save the new weather data to MongoDB
        }

        return weather;
    }

    // Helper method to fetch weather from the OpenWeather API
    private WeatherData fetchWeatherFromApi(String city) {
        String url = String.format("http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric", city, apiKey);

        RestTemplate restTemplate = new RestTemplate();
        String jsonResponse = restTemplate.getForObject(url, String.class);

        if (jsonResponse != null) {
            // Parse the JSON response manually or use a library like Jackson/Gson
            // For simplicity, returning mock data (Replace with actual JSON parsing)
            if (city.equalsIgnoreCase("Chennai")) {
                return new WeatherData(
                        null,  // ID will be generated by MongoDB
                        "Chennai",      // City name
                        "Haze",         // Weather description
                        27.58,          // Temperature
                        30.45,          // Feels like
                        75,             // Humidity
                        6.17,           // Wind speed
                        1012,           // Pressure
                        LocalDateTime.now()  // Set timestamp to now
                );
            }
        }
        return null;
    }

}
